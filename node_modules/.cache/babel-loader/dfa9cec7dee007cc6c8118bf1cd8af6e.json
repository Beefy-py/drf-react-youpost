{"ast":null,"code":"'use strict'; // NOTE: we only support baseline and progressive JPGs here\n// due to the structure of the loader class, we only get a buffer\n// with a maximum size of 4096 bytes. so if the SOF marker is outside\n// if this range we can't detect the file size correctly.\n\nfunction isJPG(buffer) {\n  //, filepath\n  var SOIMarker = buffer.toString('hex', 0, 2);\n  return 'ffd8' === SOIMarker;\n}\n\nfunction extractSize(buffer, i) {\n  return {\n    'height': buffer.readUInt16BE(i),\n    'width': buffer.readUInt16BE(i + 2)\n  };\n}\n\nfunction validateBuffer(buffer, i) {\n  // index should be within buffer limits\n  if (i > buffer.length) {\n    throw new TypeError('Corrupt JPG, exceeded buffer limits');\n  } // Every JPEG block must begin with a 0xFF\n\n\n  if (buffer[i] !== 0xFF) {\n    throw new TypeError('Invalid JPG, marker table corrupted');\n  }\n}\n\nfunction calculate(buffer) {\n  // Skip 4 chars, they are for signature\n  buffer = buffer.slice(4);\n  var i, next;\n\n  while (buffer.length) {\n    // read length of the next block\n    i = buffer.readUInt16BE(0); // ensure correct format\n\n    validateBuffer(buffer, i); // 0xFFC0 is baseline standard(SOF)\n    // 0xFFC1 is baseline optimized(SOF)\n    // 0xFFC2 is progressive(SOF2)\n\n    next = buffer[i + 1];\n\n    if (next === 0xC0 || next === 0xC1 || next === 0xC2) {\n      return extractSize(buffer, i + 5);\n    } // move to the next block\n\n\n    buffer = buffer.slice(i + 2);\n  }\n\n  throw new TypeError('Invalid JPG, no size found');\n}\n\nmodule.exports = {\n  'detect': isJPG,\n  'calculate': calculate\n};","map":{"version":3,"sources":["C:/Users/kenny/Projects/djangotutorials/drf_react_project/react_frontend/blogapi/node_modules/image-size/lib/types/jpg.js"],"names":["isJPG","buffer","SOIMarker","toString","extractSize","i","readUInt16BE","validateBuffer","length","TypeError","calculate","slice","next","module","exports"],"mappings":"AAAA,a,CAEA;AACA;AACA;AACA;;AAEA,SAASA,KAAT,CAAgBC,MAAhB,EAAwB;AAAE;AACxB,MAAIC,SAAS,GAAGD,MAAM,CAACE,QAAP,CAAgB,KAAhB,EAAuB,CAAvB,EAA0B,CAA1B,CAAhB;AACA,SAAQ,WAAWD,SAAnB;AACD;;AAED,SAASE,WAAT,CAAsBH,MAAtB,EAA8BI,CAA9B,EAAiC;AAC/B,SAAO;AACL,cAAWJ,MAAM,CAACK,YAAP,CAAoBD,CAApB,CADN;AAEL,aAAUJ,MAAM,CAACK,YAAP,CAAoBD,CAAC,GAAG,CAAxB;AAFL,GAAP;AAID;;AAED,SAASE,cAAT,CAAyBN,MAAzB,EAAiCI,CAAjC,EAAoC;AAClC;AACA,MAAIA,CAAC,GAAGJ,MAAM,CAACO,MAAf,EAAuB;AACrB,UAAM,IAAIC,SAAJ,CAAc,qCAAd,CAAN;AACD,GAJiC,CAKlC;;;AACA,MAAIR,MAAM,CAACI,CAAD,CAAN,KAAc,IAAlB,EAAwB;AACtB,UAAM,IAAII,SAAJ,CAAc,qCAAd,CAAN;AACD;AACF;;AAED,SAASC,SAAT,CAAoBT,MAApB,EAA4B;AAE1B;AACAA,EAAAA,MAAM,GAAGA,MAAM,CAACU,KAAP,CAAa,CAAb,CAAT;AAEA,MAAIN,CAAJ,EAAOO,IAAP;;AACA,SAAOX,MAAM,CAACO,MAAd,EAAsB;AACpB;AACAH,IAAAA,CAAC,GAAGJ,MAAM,CAACK,YAAP,CAAoB,CAApB,CAAJ,CAFoB,CAIpB;;AACAC,IAAAA,cAAc,CAACN,MAAD,EAASI,CAAT,CAAd,CALoB,CAOpB;AACA;AACA;;AACAO,IAAAA,IAAI,GAAGX,MAAM,CAACI,CAAC,GAAG,CAAL,CAAb;;AACA,QAAIO,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,IAA1B,IAAkCA,IAAI,KAAK,IAA/C,EAAqD;AACnD,aAAOR,WAAW,CAACH,MAAD,EAASI,CAAC,GAAG,CAAb,CAAlB;AACD,KAbmB,CAepB;;;AACAJ,IAAAA,MAAM,GAAGA,MAAM,CAACU,KAAP,CAAaN,CAAC,GAAG,CAAjB,CAAT;AACD;;AAED,QAAM,IAAII,SAAJ,CAAc,4BAAd,CAAN;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiB;AACf,YAAUd,KADK;AAEf,eAAaU;AAFE,CAAjB","sourcesContent":["'use strict';\n\n// NOTE: we only support baseline and progressive JPGs here\n// due to the structure of the loader class, we only get a buffer\n// with a maximum size of 4096 bytes. so if the SOF marker is outside\n// if this range we can't detect the file size correctly.\n\nfunction isJPG (buffer) { //, filepath\n  var SOIMarker = buffer.toString('hex', 0, 2);\n  return ('ffd8' === SOIMarker);\n}\n\nfunction extractSize (buffer, i) {\n  return {\n    'height' : buffer.readUInt16BE(i),\n    'width' : buffer.readUInt16BE(i + 2)\n  };\n}\n\nfunction validateBuffer (buffer, i) {\n  // index should be within buffer limits\n  if (i > buffer.length) {\n    throw new TypeError('Corrupt JPG, exceeded buffer limits');\n  }\n  // Every JPEG block must begin with a 0xFF\n  if (buffer[i] !== 0xFF) {\n    throw new TypeError('Invalid JPG, marker table corrupted');\n  }\n}\n\nfunction calculate (buffer) {\n\n  // Skip 4 chars, they are for signature\n  buffer = buffer.slice(4);\n\n  var i, next;\n  while (buffer.length) {\n    // read length of the next block\n    i = buffer.readUInt16BE(0);\n\n    // ensure correct format\n    validateBuffer(buffer, i);\n\n    // 0xFFC0 is baseline standard(SOF)\n    // 0xFFC1 is baseline optimized(SOF)\n    // 0xFFC2 is progressive(SOF2)\n    next = buffer[i + 1];\n    if (next === 0xC0 || next === 0xC1 || next === 0xC2) {\n      return extractSize(buffer, i + 5);\n    }\n\n    // move to the next block\n    buffer = buffer.slice(i + 2);\n  }\n\n  throw new TypeError('Invalid JPG, no size found');\n}\n\nmodule.exports = {\n  'detect': isJPG,\n  'calculate': calculate\n};\n"]},"metadata":{},"sourceType":"script"}