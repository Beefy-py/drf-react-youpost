{"ast":null,"code":"'use strict';\n\nvar svgReg = /<svg[^>]+[^>]*>/;\n\nfunction isSVG(buffer) {\n  return svgReg.test(buffer);\n}\n\nvar extractorRegExps = {\n  'root': /<svg\\s[^>]+>/,\n  'width': /\\bwidth=(['\"])([^%]+?)\\1/,\n  'height': /\\bheight=(['\"])([^%]+?)\\1/,\n  'viewbox': /\\bviewBox=(['\"])(.+?)\\1/\n};\n\nfunction parseViewbox(viewbox) {\n  var bounds = viewbox.split(' ');\n  return {\n    'width': parseInt(bounds[2], 10),\n    'height': parseInt(bounds[3], 10)\n  };\n}\n\nfunction parseAttributes(root) {\n  var width = root.match(extractorRegExps.width);\n  var height = root.match(extractorRegExps.height);\n  var viewbox = root.match(extractorRegExps.viewbox);\n  return {\n    'width': width && parseInt(width[2], 10),\n    'height': height && parseInt(height[2], 10),\n    'viewbox': viewbox && parseViewbox(viewbox[2])\n  };\n}\n\nfunction calculateByDimensions(attrs) {\n  return {\n    'width': attrs.width,\n    'height': attrs.height\n  };\n}\n\nfunction calculateByViewbox(attrs) {\n  var ratio = attrs.viewbox.width / attrs.viewbox.height;\n\n  if (attrs.width) {\n    return {\n      'width': attrs.width,\n      'height': Math.floor(attrs.width / ratio)\n    };\n  }\n\n  if (attrs.height) {\n    return {\n      'width': Math.floor(attrs.height * ratio),\n      'height': attrs.height\n    };\n  }\n\n  return {\n    'width': attrs.viewbox.width,\n    'height': attrs.viewbox.height\n  };\n}\n\nfunction calculate(buffer) {\n  var root = buffer.toString('utf8').match(extractorRegExps.root);\n\n  if (root) {\n    var attrs = parseAttributes(root[0]);\n\n    if (attrs.width && attrs.height) {\n      return calculateByDimensions(attrs);\n    }\n\n    if (attrs.viewbox) {\n      return calculateByViewbox(attrs);\n    }\n  }\n\n  throw new TypeError('invalid svg');\n}\n\nmodule.exports = {\n  'detect': isSVG,\n  'calculate': calculate\n};","map":{"version":3,"sources":["C:/Users/kenny/Projects/djangotutorials/drf_react_project/react_frontend/blogapi/node_modules/image-size/lib/types/svg.js"],"names":["svgReg","isSVG","buffer","test","extractorRegExps","parseViewbox","viewbox","bounds","split","parseInt","parseAttributes","root","width","match","height","calculateByDimensions","attrs","calculateByViewbox","ratio","Math","floor","calculate","toString","TypeError","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAG,iBAAb;;AACA,SAASC,KAAT,CAAgBC,MAAhB,EAAwB;AACtB,SAAOF,MAAM,CAACG,IAAP,CAAYD,MAAZ,CAAP;AACD;;AAED,IAAIE,gBAAgB,GAAG;AACrB,UAAQ,cADa;AAErB,WAAS,0BAFY;AAGrB,YAAU,2BAHW;AAIrB,aAAW;AAJU,CAAvB;;AAOA,SAASC,YAAT,CAAuBC,OAAvB,EAAgC;AAC9B,MAAIC,MAAM,GAAGD,OAAO,CAACE,KAAR,CAAc,GAAd,CAAb;AACA,SAAO;AACL,aAASC,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CADZ;AAEL,cAAUE,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ;AAFb,GAAP;AAID;;AAED,SAASG,eAAT,CAA0BC,IAA1B,EAAgC;AAC9B,MAAIC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAWT,gBAAgB,CAACQ,KAA5B,CAAZ;AACA,MAAIE,MAAM,GAAGH,IAAI,CAACE,KAAL,CAAWT,gBAAgB,CAACU,MAA5B,CAAb;AACA,MAAIR,OAAO,GAAGK,IAAI,CAACE,KAAL,CAAWT,gBAAgB,CAACE,OAA5B,CAAd;AACA,SAAO;AACL,aAASM,KAAK,IAAIH,QAAQ,CAACG,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CADrB;AAEL,cAAUE,MAAM,IAAIL,QAAQ,CAACK,MAAM,CAAC,CAAD,CAAP,EAAY,EAAZ,CAFvB;AAGL,eAAWR,OAAO,IAAID,YAAY,CAACC,OAAO,CAAC,CAAD,CAAR;AAH7B,GAAP;AAKD;;AAED,SAASS,qBAAT,CAAgCC,KAAhC,EAAuC;AACrC,SAAO;AACL,aAASA,KAAK,CAACJ,KADV;AAEL,cAAUI,KAAK,CAACF;AAFX,GAAP;AAID;;AAED,SAASG,kBAAT,CAA6BD,KAA7B,EAAoC;AAClC,MAAIE,KAAK,GAAGF,KAAK,CAACV,OAAN,CAAcM,KAAd,GAAsBI,KAAK,CAACV,OAAN,CAAcQ,MAAhD;;AACA,MAAIE,KAAK,CAACJ,KAAV,EAAiB;AACf,WAAO;AACL,eAASI,KAAK,CAACJ,KADV;AAEL,gBAAUO,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACJ,KAAN,GAAcM,KAAzB;AAFL,KAAP;AAID;;AACD,MAAIF,KAAK,CAACF,MAAV,EAAkB;AAChB,WAAO;AACL,eAASK,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACF,MAAN,GAAeI,KAA1B,CADJ;AAEL,gBAAUF,KAAK,CAACF;AAFX,KAAP;AAID;;AACD,SAAO;AACL,aAASE,KAAK,CAACV,OAAN,CAAcM,KADlB;AAEL,cAAUI,KAAK,CAACV,OAAN,CAAcQ;AAFnB,GAAP;AAID;;AAED,SAASO,SAAT,CAAoBnB,MAApB,EAA4B;AAC1B,MAAIS,IAAI,GAAGT,MAAM,CAACoB,QAAP,CAAgB,MAAhB,EAAwBT,KAAxB,CAA8BT,gBAAgB,CAACO,IAA/C,CAAX;;AACA,MAAIA,IAAJ,EAAU;AACR,QAAIK,KAAK,GAAGN,eAAe,CAACC,IAAI,CAAC,CAAD,CAAL,CAA3B;;AACA,QAAIK,KAAK,CAACJ,KAAN,IAAeI,KAAK,CAACF,MAAzB,EAAiC;AAC/B,aAAOC,qBAAqB,CAACC,KAAD,CAA5B;AACD;;AACD,QAAIA,KAAK,CAACV,OAAV,EAAmB;AACjB,aAAOW,kBAAkB,CAACD,KAAD,CAAzB;AACD;AACF;;AACD,QAAM,IAAIO,SAAJ,CAAc,aAAd,CAAN;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AACf,YAAUxB,KADK;AAEf,eAAaoB;AAFE,CAAjB","sourcesContent":["'use strict';\n\nvar svgReg = /<svg[^>]+[^>]*>/;\nfunction isSVG (buffer) {\n  return svgReg.test(buffer);\n}\n\nvar extractorRegExps = {\n  'root': /<svg\\s[^>]+>/,\n  'width': /\\bwidth=(['\"])([^%]+?)\\1/,\n  'height': /\\bheight=(['\"])([^%]+?)\\1/,\n  'viewbox': /\\bviewBox=(['\"])(.+?)\\1/\n};\n\nfunction parseViewbox (viewbox) {\n  var bounds = viewbox.split(' ');\n  return {\n    'width': parseInt(bounds[2], 10),\n    'height': parseInt(bounds[3], 10)\n  };\n}\n\nfunction parseAttributes (root) {\n  var width = root.match(extractorRegExps.width);\n  var height = root.match(extractorRegExps.height);\n  var viewbox = root.match(extractorRegExps.viewbox);\n  return {\n    'width': width && parseInt(width[2], 10),\n    'height': height && parseInt(height[2], 10),\n    'viewbox': viewbox && parseViewbox(viewbox[2])\n  };\n}\n\nfunction calculateByDimensions (attrs) {\n  return {\n    'width': attrs.width,\n    'height': attrs.height\n  };\n}\n\nfunction calculateByViewbox (attrs) {\n  var ratio = attrs.viewbox.width / attrs.viewbox.height;\n  if (attrs.width) {\n    return {\n      'width': attrs.width,\n      'height': Math.floor(attrs.width / ratio)\n    };\n  }\n  if (attrs.height) {\n    return {\n      'width': Math.floor(attrs.height * ratio),\n      'height': attrs.height\n    };\n  }\n  return {\n    'width': attrs.viewbox.width,\n    'height': attrs.viewbox.height\n  };\n}\n\nfunction calculate (buffer) {\n  var root = buffer.toString('utf8').match(extractorRegExps.root);\n  if (root) {\n    var attrs = parseAttributes(root[0]);\n    if (attrs.width && attrs.height) {\n      return calculateByDimensions(attrs);\n    }\n    if (attrs.viewbox) {\n      return calculateByViewbox(attrs);\n    }\n  }\n  throw new TypeError('invalid svg');\n}\n\nmodule.exports = {\n  'detect': isSVG,\n  'calculate': calculate\n};\n"]},"metadata":{},"sourceType":"script"}