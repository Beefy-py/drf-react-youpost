{"ast":null,"code":"import axios from \"axios\";\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\nconst baseURL = \"https://blog-youpost.herokuapp.com/api/\";\nconst axiosInstance = axios.create({\n  baseURL: baseURL,\n  timeout: 5000,\n  headers: {\n    Authorization: localStorage.getItem(\"access_token\") ? \"JWT \" + localStorage.getItem(\"access_token\") : null,\n    \"Content-Type\": \"application/json\",\n    accept: \"application/json\"\n  }\n});\naxiosInstance.interceptors.response.use(response => {\n  console.log(response);\n  return response;\n}, async function (error) {\n  const originalRequest = error.config;\n\n  if (typeof error.response === \"undefined\") {\n    console.log('using base url for axios requests: ' + baseURL);\n    alert(\"A server/network error occurred. \" + \"Looks like CORS might be the problem. \" + \"Sorry about this - we will get it fixed shortly.\");\n    return Promise.reject(error);\n  }\n\n  if (error.response.status === 401 && originalRequest.url === baseURL + \"token/refresh/\") {\n    window.location.href = \"/login/\";\n    return Promise.reject(error);\n  }\n\n  if (error.response.data.code === \"token_not_valid\" && error.response.status === 401 && error.response.statusText === \"Unauthorized\") {\n    const refreshToken = localStorage.getItem(\"refresh_token\");\n\n    if (refreshToken !== \"undefined\") {\n      if (refreshToken === null) window.location.reload();\n      const tokenParts = JSON.parse(atob(refreshToken.split(\".\")[1])); // exp date in token is expressed in seconds, while now() returns milliseconds:\n\n      const now = Math.ceil(Date.now() / 1000); // console.log(tokenParts.exp);\n      // console.log(tokenParts);\n\n      if (tokenParts.exp > now) {\n        return axiosInstance.post(\"/token/refresh\", {\n          refresh: refreshToken\n        }).then(response => {\n          //console.log(response.data);\n          localStorage.setItem(\"access_token\", response.data.access);\n          localStorage.setItem(\"refresh_token\", response.data.refresh);\n          axiosInstance.defaults.headers[\"Authorization\"] = \"JWT \" + response.data.access;\n          originalRequest.headers[\"Authorization\"] = \"JWT \" + response.data.access; //console.log(\"create new token\");\n\n          return axiosInstance(originalRequest);\n        });\n      } else {\n        console.log(\"Refresh token is expired\", tokenParts.exp, now);\n        window.location.href = \"/login/\";\n      }\n    } else {\n      window.location.href = \"/login/\";\n      console.log(\"Refresh token not available.\");\n    }\n  } // specific error handling done elsewhere\n\n\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"sources":["C:/Users/kenny/Projects/drf_react_youpost/src/baseAxios.js"],"names":["axios","defaults","xsrfCookieName","xsrfHeaderName","baseURL","axiosInstance","create","timeout","headers","Authorization","localStorage","getItem","accept","interceptors","response","use","console","log","error","originalRequest","config","alert","Promise","reject","status","url","window","location","href","data","code","statusText","refreshToken","reload","tokenParts","JSON","parse","atob","split","now","Math","ceil","Date","exp","post","refresh","then","setItem","access"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\naxios.defaults.xsrfCookieName = 'csrftoken';\r\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\r\n\r\nconst baseURL = \"https://blog-youpost.herokuapp.com/api/\";\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: baseURL,\r\n  timeout: 5000,\r\n  headers: {\r\n    Authorization: localStorage.getItem(\"access_token\")\r\n      ? \"JWT \" + localStorage.getItem(\"access_token\")\r\n      : null,\r\n    \"Content-Type\": \"application/json\",\r\n    accept: \"application/json\",\r\n  },\r\n});\r\n\r\naxiosInstance.interceptors.response.use(\r\n  (response) => {\r\n    console.log(response)\r\n    return response;\r\n  },\r\n  async function (error) {\r\n    const originalRequest = error.config;\r\n\r\n    if (typeof error.response === \"undefined\") {\r\n\r\n      console.log('using base url for axios requests: '+baseURL)\r\n\r\n      alert(\r\n        \"A server/network error occurred. \" +\r\n          \"Looks like CORS might be the problem. \" +\r\n          \"Sorry about this - we will get it fixed shortly.\"\r\n      );\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    if (\r\n      error.response.status === 401 &&\r\n      originalRequest.url === baseURL + \"token/refresh/\"\r\n    ) {\r\n      window.location.href = \"/login/\";\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    if (\r\n      error.response.data.code === \"token_not_valid\" &&\r\n      error.response.status === 401 &&\r\n      error.response.statusText === \"Unauthorized\"\r\n    ) {\r\n      const refreshToken = localStorage.getItem(\"refresh_token\");\r\n\r\n      if (refreshToken !== \"undefined\") {\r\n        if (refreshToken === null) window.location.reload();\r\n        const tokenParts = JSON.parse(atob(refreshToken.split(\".\")[1]));\r\n        // exp date in token is expressed in seconds, while now() returns milliseconds:\r\n        const now = Math.ceil(Date.now() / 1000);\r\n        // console.log(tokenParts.exp);\r\n        // console.log(tokenParts);\r\n\r\n        if (tokenParts.exp > now) {\r\n          return axiosInstance\r\n            .post(\"/token/refresh\", { refresh: refreshToken })\r\n            .then((response) => {\r\n              //console.log(response.data);\r\n\r\n              localStorage.setItem(\"access_token\", response.data.access);\r\n              localStorage.setItem(\"refresh_token\", response.data.refresh);\r\n\r\n              axiosInstance.defaults.headers[\"Authorization\"] =\r\n                \"JWT \" + response.data.access;\r\n              originalRequest.headers[\"Authorization\"] =\r\n                \"JWT \" + response.data.access;\r\n\r\n              //console.log(\"create new token\");\r\n\r\n              return axiosInstance(originalRequest);\r\n            });\r\n        } else {\r\n          console.log(\"Refresh token is expired\", tokenParts.exp, now);\r\n          window.location.href = \"/login/\";\r\n        }\r\n      } else {\r\n        window.location.href = \"/login/\";\r\n        console.log(\"Refresh token not available.\");\r\n      }\r\n    }\r\n\r\n    // specific error handling done elsewhere\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default axiosInstance;\r\n"]},"metadata":{},"sourceType":"module"}