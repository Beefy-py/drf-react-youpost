{"ast":null,"code":"'use strict';\n\nconst imageSize = require('image-size');\n\nmodule.exports = Joi => {\n  // Validation for width/height parameters\n  const dimensionSchema = Joi.number().positive().required();\n  const typesSchema = Joi.array().allow(imageSize.types).min(1).required();\n  return {\n    name: 'image',\n    base: Joi.binary(),\n    language: {\n      minWidth: 'must be at least {{minWidth}} pixels in width',\n      maxWidth: 'must be no more than {{maxWidth}} pixels in width',\n      minHeight: 'must be at least {{minHeight}} pixels in height',\n      maxHeight: 'must be no more than {{maxHeight}} pixels in height',\n      minDimensions: 'must be at least {{minWidth}} pixels in width and {{minHeight}} pixels in height',\n      maxDimensions: 'must be no more than {{minWidth}} pixels in width and {{minHeight}} pixels in height',\n      allowTypes: 'must be one of the following types: {{allowedTypes}}',\n      disallowTypes: 'must be one of the following types: {{allowedTypes}}'\n    },\n\n    pre(value, state, options) {\n      // Cache the image size read in case we're checking multiple rules\n      this._image = imageSize(value);\n      return value;\n    },\n\n    rules: [// Minimum width\n    {\n      name: 'minWidth',\n      params: {\n        minWidth: dimensionSchema\n      },\n\n      validate(params, value, state, options) {\n        if (this._image.width < params.minWidth) {\n          return this.createError('image.minWidth', params, state, options);\n        }\n\n        return value;\n      }\n\n    }, // Maximum width\n    {\n      name: 'maxWidth',\n      params: {\n        maxWidth: dimensionSchema\n      },\n\n      validate(params, value, state, options) {\n        if (this._image.width > params.maxWidth) {\n          return this.createError('image.maxWidth', params, state, options);\n        }\n\n        return value;\n      }\n\n    }, // Minimum height\n    {\n      name: 'minHeight',\n      params: {\n        minHeight: dimensionSchema\n      },\n\n      validate(params, value, state, options) {\n        if (this._image.height < params.minHeight) {\n          return this.createError('image.minHeight', params, state, options);\n        }\n\n        return value;\n      }\n\n    }, // Maximum height\n    {\n      name: 'maxHeight',\n      params: {\n        maxHeight: dimensionSchema\n      },\n\n      validate(params, value, state, options) {\n        if (this._image.height > params.maxHeight) {\n          return this.createError('image.maxHeight', params, state, options);\n        }\n\n        return value;\n      }\n\n    }, // Minimum width/height\n    {\n      name: 'minDimensions',\n      params: {\n        minWidth: dimensionSchema,\n        minHeight: dimensionSchema\n      },\n\n      validate(params, value, state, options) {\n        if (this._image.width < params.minWidth || this._image.height < params.minHeight) {\n          return this.createError('image.minDimensions', params, state, options);\n        }\n\n        return value;\n      }\n\n    }, // Maximum width/height\n    {\n      name: 'maxDimensions',\n      params: {\n        minWidth: dimensionSchema,\n        minHeight: dimensionSchema\n      },\n\n      validate(params, value, state, options) {\n        if (this._image.width > params.minWidth || this._image.height > params.minHeight) {\n          return this.createError('image.maxDimensions', params, state, options);\n        }\n\n        return value;\n      }\n\n    }, // Allow types\n    {\n      name: 'allowTypes',\n      params: {\n        allowedTypes: typesSchema\n      },\n\n      validate(params, value, state, options) {\n        const allowedTypes = Array.isArray(params.allowedTypes) ? params.allowedTypes : [params.allowedTypes];\n\n        if (!allowedTypes.includes(this._image.type)) {\n          return this.createError('image.allowTypes', {\n            allowedTypes: allowedTypes.join(', ')\n          }, state, options);\n        }\n\n        return value;\n      }\n\n    }, // Disallow types\n    {\n      name: 'disallowTypes',\n      params: {\n        disallowedTypes: typesSchema\n      },\n\n      validate(params, value, state, options) {\n        const disallowedTypes = Array.isArray(params.disallowedTypes) ? params.disallowedTypes : [params.disallowedTypes];\n\n        if (disallowedTypes.includes(this._image.type)) {\n          const allowedTypes = imageSize.types.filter(type => !disallowedTypes.includes(type));\n          return this.createError('image.disallowTypes', {\n            allowedTypes: allowedTypes.join(', ')\n          }, state, options);\n        }\n\n        return value;\n      }\n\n    }]\n  };\n};","map":{"version":3,"sources":["C:/Users/kenny/Projects/drf_react_youpost/node_modules/joi-image-extension/lib/index.js"],"names":["imageSize","require","module","exports","Joi","dimensionSchema","number","positive","required","typesSchema","array","allow","types","min","name","base","binary","language","minWidth","maxWidth","minHeight","maxHeight","minDimensions","maxDimensions","allowTypes","disallowTypes","pre","value","state","options","_image","rules","params","validate","width","createError","height","allowedTypes","Array","isArray","includes","type","join","disallowedTypes","filter"],"mappings":"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","sourcesContent":["'use strict';\n\nconst imageSize = require('image-size');\n\nmodule.exports = Joi => {\n  // Validation for width/height parameters\n\n  const dimensionSchema = Joi.number().positive().required();\n\n  const typesSchema = Joi.array().allow(imageSize.types).min(1).required();\n\n  return {\n    name: 'image',\n    base: Joi.binary(),\n    language: {\n      minWidth: 'must be at least {{minWidth}} pixels in width',\n      maxWidth: 'must be no more than {{maxWidth}} pixels in width',\n      minHeight: 'must be at least {{minHeight}} pixels in height',\n      maxHeight: 'must be no more than {{maxHeight}} pixels in height',\n      minDimensions: 'must be at least {{minWidth}} pixels in width and {{minHeight}} pixels in height',\n      maxDimensions: 'must be no more than {{minWidth}} pixels in width and {{minHeight}} pixels in height',\n      allowTypes: 'must be one of the following types: {{allowedTypes}}',\n      disallowTypes: 'must be one of the following types: {{allowedTypes}}'\n    },\n\n    pre(value, state, options) {\n      // Cache the image size read in case we're checking multiple rules\n      this._image = imageSize(value);\n      return value;\n    },\n\n    rules: [\n    // Minimum width\n\n    {\n      name: 'minWidth',\n      params: {\n        minWidth: dimensionSchema\n      },\n      validate(params, value, state, options) {\n        if (this._image.width < params.minWidth) {\n          return this.createError('image.minWidth', params, state, options);\n        }\n        return value;\n      }\n    },\n\n    // Maximum width\n\n    {\n      name: 'maxWidth',\n      params: {\n        maxWidth: dimensionSchema\n      },\n      validate(params, value, state, options) {\n        if (this._image.width > params.maxWidth) {\n          return this.createError('image.maxWidth', params, state, options);\n        }\n        return value;\n      }\n    },\n\n    // Minimum height\n\n    {\n      name: 'minHeight',\n      params: {\n        minHeight: dimensionSchema\n      },\n      validate(params, value, state, options) {\n        if (this._image.height < params.minHeight) {\n          return this.createError('image.minHeight', params, state, options);\n        }\n        return value;\n      }\n    },\n\n    // Maximum height\n\n    {\n      name: 'maxHeight',\n      params: {\n        maxHeight: dimensionSchema\n      },\n      validate(params, value, state, options) {\n        if (this._image.height > params.maxHeight) {\n          return this.createError('image.maxHeight', params, state, options);\n        }\n        return value;\n      }\n    },\n\n    // Minimum width/height\n\n    {\n      name: 'minDimensions',\n      params: {\n        minWidth: dimensionSchema,\n        minHeight: dimensionSchema\n      },\n      validate(params, value, state, options) {\n        if (this._image.width < params.minWidth || this._image.height < params.minHeight) {\n          return this.createError('image.minDimensions', params, state, options);\n        }\n        return value;\n      }\n    },\n\n    // Maximum width/height\n\n    {\n      name: 'maxDimensions',\n      params: {\n        minWidth: dimensionSchema,\n        minHeight: dimensionSchema\n      },\n      validate(params, value, state, options) {\n        if (this._image.width > params.minWidth || this._image.height > params.minHeight) {\n          return this.createError('image.maxDimensions', params, state, options);\n        }\n        return value;\n      }\n    },\n\n    // Allow types\n\n    {\n      name: 'allowTypes',\n      params: {\n        allowedTypes: typesSchema\n      },\n      validate(params, value, state, options) {\n        const allowedTypes = Array.isArray(params.allowedTypes) ? params.allowedTypes : [params.allowedTypes];\n        if (!allowedTypes.includes(this._image.type)) {\n          return this.createError('image.allowTypes', { allowedTypes: allowedTypes.join(', ') }, state, options);\n        }\n        return value;\n      }\n    },\n\n    // Disallow types\n\n    {\n      name: 'disallowTypes',\n      params: {\n        disallowedTypes: typesSchema\n      },\n      validate(params, value, state, options) {\n        const disallowedTypes = Array.isArray(params.disallowedTypes) ? params.disallowedTypes : [params.disallowedTypes];\n        if (disallowedTypes.includes(this._image.type)) {\n          const allowedTypes = imageSize.types.filter(type => !disallowedTypes.includes(type));\n          return this.createError('image.disallowTypes', { allowedTypes: allowedTypes.join(', ') }, state, options);\n        }\n        return value;\n      }\n    }]\n  };\n};"]},"metadata":{},"sourceType":"script"}