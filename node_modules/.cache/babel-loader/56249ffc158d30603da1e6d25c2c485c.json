{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kenny\\\\Projects\\\\drf_react_youpost\\\\src\\\\components\\\\content\\\\body.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Posts from \"./posts\";\nimport PostLoadingComponent from \"../actions/postLoading\";\nimport { useState, useEffect, useContext } from \"react\";\nimport DarkContext from \"./../../context/darkMode\";\nimport { useHistory } from \"react-router-dom\";\nimport axiosInstance from \"./../../baseAxios\";\nimport ReactPaginate from \"react-paginate\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Body = ({\n  toggleShowSearchBar\n}) => {\n  _s();\n\n  const darkContext = useContext(DarkContext);\n  let history = useHistory();\n  const PostLoading = PostLoadingComponent(Posts);\n  const [currentlySortedBy, setCurrentlySortedBy] = useState(\"latest\");\n  const [appState, setAppState] = useState({\n    loading: false,\n    posts: null\n  });\n  useEffect(() => {\n    toggleShowSearchBar(true);\n    getPosts();\n  }, [setAppState]);\n\n  const getPosts = () => {\n    setAppState({\n      loading: true\n    });\n    axiosInstance.get().then(res => setAppState({\n      loading: false,\n      posts: res.data\n    }));\n  };\n\n  let allPosts = [];\n  axiosInstance.get().then(res => allPosts = res.data);\n\n  const getPostsByTag = tag => {\n    if (appState.posts) {\n      if (tag === \"Lat\") {\n        const filtered = allPosts.sort((p1, p2) => p2.id - p1.id);\n        setAppState({\n          posts: filtered\n        });\n        setCurrentlySortedBy(\"latest\");\n      }\n\n      if (tag === \"Old\") {\n        const filtered = allPosts.sort((p1, p2) => p1.id - p2.id);\n        setAppState({\n          posts: filtered\n        });\n        setCurrentlySortedBy(\"oldest\");\n      }\n\n      if (tag === \"MPo\") {\n        const filtered = allPosts.sort((p1, p2) => p2.rating - p1.rating);\n        setAppState({\n          posts: filtered\n        });\n        setCurrentlySortedBy(\"most popular\");\n      }\n\n      if (tag === \"LPo\") {\n        const filtered = allPosts.sort((p1, p2) => p1.rating - p2.rating);\n        setAppState({\n          posts: filtered\n        });\n        setCurrentlySortedBy(\"least popular\");\n      }\n      /*\r\n      const filteredPosts = appState.posts.filter(\r\n        (post) => post.category === tag\r\n      );\r\n        console.log(filteredPosts);\r\n        setAppState({ posts: filteredPosts });\r\n      */\n\n\n      return \"display posts by \" + tag;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(PostLoading, {\n    rows: 3,\n    getPostsByTag: getPostsByTag,\n    isLoading: appState.loading,\n    posts: appState.posts,\n    curSorted: currentlySortedBy\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Body, \"lI0X352TUEfJNkdi3wwuf9hAC0I=\", false, function () {\n  return [useHistory];\n});\n\n_c = Body;\nexport default Body;\n\nvar _c;\n\n$RefreshReg$(_c, \"Body\");","map":{"version":3,"sources":["C:/Users/kenny/Projects/drf_react_youpost/src/components/content/body.jsx"],"names":["React","Posts","PostLoadingComponent","useState","useEffect","useContext","DarkContext","useHistory","axiosInstance","ReactPaginate","Body","toggleShowSearchBar","darkContext","history","PostLoading","currentlySortedBy","setCurrentlySortedBy","appState","setAppState","loading","posts","getPosts","get","then","res","data","allPosts","getPostsByTag","tag","filtered","sort","p1","p2","id","rating"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Posts from \"./posts\";\r\nimport PostLoadingComponent from \"../actions/postLoading\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport DarkContext from \"./../../context/darkMode\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axiosInstance from \"./../../baseAxios\";\r\nimport ReactPaginate from \"react-paginate\";\r\n\r\nconst Body = ({ toggleShowSearchBar }) => {\r\n  const darkContext = useContext(DarkContext);\r\n  let history = useHistory();\r\n\r\n  const PostLoading = PostLoadingComponent(Posts);\r\n  const [currentlySortedBy, setCurrentlySortedBy] = useState(\"latest\");\r\n  const [appState, setAppState] = useState({ loading: false, posts: null });\r\n\r\n  useEffect(() => {\r\n    toggleShowSearchBar(true);\r\n    getPosts();\r\n  }, [setAppState]);\r\n\r\n  const getPosts = () => {\r\n    setAppState({ loading: true });\r\n\r\n    axiosInstance\r\n      .get()\r\n      .then((res) => setAppState({ loading: false, posts: res.data }));\r\n  };\r\n\r\n  let allPosts = [];\r\n  axiosInstance.get().then((res) => (allPosts = res.data));\r\n\r\n  const getPostsByTag = (tag) => {\r\n    if (appState.posts) {\r\n      if (tag === \"Lat\") {\r\n        const filtered = allPosts.sort((p1, p2) => p2.id - p1.id);\r\n        setAppState({ posts: filtered });\r\n        setCurrentlySortedBy(\"latest\");\r\n      }\r\n\r\n      if (tag === \"Old\") {\r\n        const filtered = allPosts.sort((p1, p2) => p1.id - p2.id);\r\n        setAppState({ posts: filtered });\r\n        setCurrentlySortedBy(\"oldest\");\r\n      }\r\n\r\n      if (tag === \"MPo\") {\r\n        const filtered = allPosts.sort((p1, p2) => p2.rating - p1.rating);\r\n        setAppState({ posts: filtered });\r\n        setCurrentlySortedBy(\"most popular\");\r\n      }\r\n\r\n      if (tag === \"LPo\") {\r\n        const filtered = allPosts.sort((p1, p2) => p1.rating - p2.rating);\r\n        setAppState({ posts: filtered });\r\n        setCurrentlySortedBy(\"least popular\");\r\n      }\r\n\r\n      /*\r\n      const filteredPosts = appState.posts.filter(\r\n        (post) => post.category === tag\r\n      );\r\n\r\n      console.log(filteredPosts);\r\n\r\n      setAppState({ posts: filteredPosts });\r\n\r\n\r\n*/\r\n      return \"display posts by \" + tag;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PostLoading\r\n      rows={3}\r\n      getPostsByTag={getPostsByTag}\r\n      isLoading={appState.loading}\r\n      posts={appState.posts}\r\n      curSorted={currentlySortedBy}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Body;\r\n"]},"metadata":{},"sourceType":"module"}