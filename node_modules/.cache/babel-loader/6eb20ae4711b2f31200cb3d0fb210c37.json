{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kenny\\\\Projects\\\\djangotutorials\\\\drf_react_project\\\\react_frontend\\\\blogapi\\\\src\\\\components\\\\actions\\\\createPost.jsx\";\nimport React from \"react\";\nimport Form from \"../common/form\";\nimport Joi from \"joi-browser\"; // import Joi from \"./../../utils/extendedJoi\";\n\nimport DarkContext from \"../../context/darkMode\";\nimport axiosInstance from \"./../../baseAxios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class CreatePost extends Form {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {\n        title: \"\",\n        image: \"\",\n        content: \"\"\n      },\n      errors: {},\n      slugs: [],\n      joi: \"\"\n    };\n    this.schema = {\n      title: Joi.string().required().min(10).max(80).label(\"Title\"),\n      image: this.state.joi ? this.state.joi.image().label(\"Image\") : Joi.string().label(\"Image\"),\n      // image: Joi.image().label(\"Image\"),\n      content: Joi.string().required().min(100).label(\"Content\")\n    };\n\n    this.afterSubmit = () => {\n      const {\n        title,\n        image,\n        content\n      } = this.state.data;\n      let formData = new FormData();\n      formData.append(\"image\", this.chosenImg, this.chosenImg.name);\n      formData.append(\"title\", title);\n      formData.append(\"content\", content);\n      formData.append(\"author\", this.props.users.filter(user => user.username == localStorage.getItem(\"currentUser\"))[0].id);\n      axiosInstance.post(\"create-post/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }).then(res => {\n        this.props.history.replace(\"/dashboard\");\n        console.log(res);\n      }).catch(response => console.log(response.response));\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleShowSearchBar(false);\n    axiosInstance.get().then(res => {\n      const slugs = res.data.map(post => post.slug);\n      this.setState({\n        slugs: slugs\n      });\n    });\n\n    const BaseJoi = require(\"joi-browser\");\n\n    const ImageExtension = require(\"joi-image-extension\");\n\n    const Joi = BaseJoi.extend(ImageExtension);\n    this.setState({\n      joi: Joi\n    });\n  }\n\n  afterChange(inp) {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(DarkContext.Consumer, {\n      children: darkContext => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-container border \" + `${darkContext.darkMode ? \"bg-dark\" : \"bg-light\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: darkContext.darkMode ? \"text-light\" : \"\",\n          children: \"Create A Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          action: \"\",\n          onSubmit: this.handleSubmit,\n          children: [this.renderInput(\"title\", \"Title\"), this.renderImageField(\"image\", \"Image\", \"image/*\"), this.renderTextArea(\"content\", \"Content\"), this.renderButton(\"Post\")]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/kenny/Projects/djangotutorials/drf_react_project/react_frontend/blogapi/src/components/actions/createPost.jsx"],"names":["React","Form","Joi","DarkContext","axiosInstance","CreatePost","state","data","title","image","content","errors","slugs","joi","schema","string","required","min","max","label","afterSubmit","formData","FormData","append","chosenImg","name","props","users","filter","user","username","localStorage","getItem","id","post","headers","then","res","history","replace","console","log","catch","response","componentDidMount","toggleShowSearchBar","get","map","slug","setState","BaseJoi","require","ImageExtension","extend","afterChange","inp","render","darkContext","darkMode","handleSubmit","renderInput","renderImageField","renderTextArea","renderButton"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,GAAP,MAAgB,aAAhB,C,CACA;;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,aAAP,MAA0B,mBAA1B;;AAEA,eAAe,MAAMC,UAAN,SAAyBJ,IAAzB,CAA8B;AAAA;AAAA;AAAA,SAe3CK,KAf2C,GAenC;AACNC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,KAAK,EAAE,EAApB;AAAwBC,QAAAA,OAAO,EAAE;AAAjC,OADA;AAENC,MAAAA,MAAM,EAAE,EAFF;AAGNC,MAAAA,KAAK,EAAE,EAHD;AAINC,MAAAA,GAAG,EAAE;AAJC,KAfmC;AAAA,SAsB3CC,MAtB2C,GAsBlC;AACPN,MAAAA,KAAK,EAAEN,GAAG,CAACa,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,EAA5B,EAAgCC,GAAhC,CAAoC,EAApC,EAAwCC,KAAxC,CAA8C,OAA9C,CADA;AAEPV,MAAAA,KAAK,EAAE,KAAKH,KAAL,CAAWO,GAAX,GACH,KAAKP,KAAL,CAAWO,GAAX,CAAeJ,KAAf,GAAuBU,KAAvB,CAA6B,OAA7B,CADG,GAEHjB,GAAG,CAACa,MAAJ,GAAaI,KAAb,CAAmB,OAAnB,CAJG;AAKP;AACAT,MAAAA,OAAO,EAAER,GAAG,CAACa,MAAJ,GAAaC,QAAb,GAAwBC,GAAxB,CAA4B,GAA5B,EAAiCE,KAAjC,CAAuC,SAAvC;AANF,KAtBkC;;AAAA,SA+B3CC,WA/B2C,GA+B7B,MAAM;AAClB,YAAM;AAAEZ,QAAAA,KAAF;AAASC,QAAAA,KAAT;AAAgBC,QAAAA;AAAhB,UAA4B,KAAKJ,KAAL,CAAWC,IAA7C;AAEA,UAAIc,QAAQ,GAAG,IAAIC,QAAJ,EAAf;AAEAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyB,KAAKC,SAA9B,EAAyC,KAAKA,SAAL,CAAeC,IAAxD;AACAJ,MAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyBf,KAAzB;AACAa,MAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2Bb,OAA3B;AACAW,MAAAA,QAAQ,CAACE,MAAT,CACE,QADF,EAEE,KAAKG,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CACGC,IAAD,IAAUA,IAAI,CAACC,QAAL,IAAiBC,YAAY,CAACC,OAAb,CAAqB,aAArB,CAD7B,EAEE,CAFF,EAEKC,EAJP;AAOA7B,MAAAA,aAAa,CACV8B,IADH,CACQ,cADR,EACwBb,QADxB,EACkC;AAC9Bc,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AADqB,OADlC,EAMGC,IANH,CAMSC,GAAD,IAAS;AACb,aAAKX,KAAL,CAAWY,OAAX,CAAmBC,OAAnB,CAA2B,YAA3B;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACD,OATH,EAUGK,KAVH,CAUUC,QAAD,IAAcH,OAAO,CAACC,GAAR,CAAYE,QAAQ,CAACA,QAArB,CAVvB;AAWD,KAzD0C;AAAA;;AAC3CC,EAAAA,iBAAiB,GAAG;AAClB,SAAKlB,KAAL,CAAWmB,mBAAX,CAA+B,KAA/B;AACAzC,IAAAA,aAAa,CAAC0C,GAAd,GAAoBV,IAApB,CAA0BC,GAAD,IAAS;AAChC,YAAMzB,KAAK,GAAGyB,GAAG,CAAC9B,IAAJ,CAASwC,GAAT,CAAcb,IAAD,IAAUA,IAAI,CAACc,IAA5B,CAAd;AACA,WAAKC,QAAL,CAAc;AAAErC,QAAAA,KAAK,EAAEA;AAAT,OAAd;AACD,KAHD;;AAKA,UAAMsC,OAAO,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AACA,UAAMC,cAAc,GAAGD,OAAO,CAAC,qBAAD,CAA9B;;AAEA,UAAMjD,GAAG,GAAGgD,OAAO,CAACG,MAAR,CAAeD,cAAf,CAAZ;AACA,SAAKH,QAAL,CAAc;AAAEpC,MAAAA,GAAG,EAAEX;AAAP,KAAd;AACD;;AA8CDoD,EAAAA,WAAW,CAACC,GAAD,EAAM,CAAE;;AAEnBC,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,WAAD,CAAa,QAAb;AAAA,gBACIC,WAAD,iBACC;AACE,QAAA,SAAS,EACP,2BACC,GAAEA,WAAW,CAACC,QAAZ,GAAuB,SAAvB,GAAmC,UAAW,EAHrD;AAAA,gCAME;AAAI,UAAA,SAAS,EAAED,WAAW,CAACC,QAAZ,GAAuB,YAAvB,GAAsC,EAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF,eASE;AAAM,UAAA,MAAM,EAAC,EAAb;AAAgB,UAAA,QAAQ,EAAE,KAAKC,YAA/B;AAAA,qBACG,KAAKC,WAAL,CAAiB,OAAjB,EAA0B,OAA1B,CADH,EAEG,KAAKC,gBAAL,CAAsB,OAAtB,EAA+B,OAA/B,EAAwC,SAAxC,CAFH,EAGG,KAAKC,cAAL,CAAoB,SAApB,EAA+B,SAA/B,CAHH,EAIG,KAAKC,YAAL,CAAkB,MAAlB,CAJH;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,YADF;AAsBD;;AApF0C","sourcesContent":["import React from \"react\";\r\nimport Form from \"../common/form\";\r\nimport Joi from \"joi-browser\";\r\n// import Joi from \"./../../utils/extendedJoi\";\r\nimport DarkContext from \"../../context/darkMode\";\r\nimport axiosInstance from \"./../../baseAxios\";\r\n\r\nexport default class CreatePost extends Form {\r\n  componentDidMount() {\r\n    this.props.toggleShowSearchBar(false);\r\n    axiosInstance.get().then((res) => {\r\n      const slugs = res.data.map((post) => post.slug);\r\n      this.setState({ slugs: slugs });\r\n    });\r\n\r\n    const BaseJoi = require(\"joi-browser\");\r\n    const ImageExtension = require(\"joi-image-extension\");\r\n\r\n    const Joi = BaseJoi.extend(ImageExtension);\r\n    this.setState({ joi: Joi });\r\n  }\r\n\r\n  state = {\r\n    data: { title: \"\", image: \"\", content: \"\" },\r\n    errors: {},\r\n    slugs: [],\r\n    joi: \"\",\r\n  };\r\n\r\n  schema = {\r\n    title: Joi.string().required().min(10).max(80).label(\"Title\"),\r\n    image: this.state.joi\r\n      ? this.state.joi.image().label(\"Image\")\r\n      : Joi.string().label(\"Image\"),\r\n    // image: Joi.image().label(\"Image\"),\r\n    content: Joi.string().required().min(100).label(\"Content\"),\r\n  };\r\n\r\n  afterSubmit = () => {\r\n    const { title, image, content } = this.state.data;\r\n\r\n    let formData = new FormData();\r\n\r\n    formData.append(\"image\", this.chosenImg, this.chosenImg.name);\r\n    formData.append(\"title\", title);\r\n    formData.append(\"content\", content);\r\n    formData.append(\r\n      \"author\",\r\n      this.props.users.filter(\r\n        (user) => user.username == localStorage.getItem(\"currentUser\")\r\n      )[0].id\r\n    );\r\n\r\n    axiosInstance\r\n      .post(\"create-post/\", formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      })\r\n      .then((res) => {\r\n        this.props.history.replace(\"/dashboard\");\r\n        console.log(res);\r\n      })\r\n      .catch((response) => console.log(response.response));\r\n  };\r\n\r\n  afterChange(inp) {}\r\n\r\n  render() {\r\n    return (\r\n      <DarkContext.Consumer>\r\n        {(darkContext) => (\r\n          <div\r\n            className={\r\n              \"form-container border \" +\r\n              `${darkContext.darkMode ? \"bg-dark\" : \"bg-light\"}`\r\n            }\r\n          >\r\n            <h1 className={darkContext.darkMode ? \"text-light\" : \"\"}>\r\n              Create A Post\r\n            </h1>\r\n            <form action=\"\" onSubmit={this.handleSubmit}>\r\n              {this.renderInput(\"title\", \"Title\")}\r\n              {this.renderImageField(\"image\", \"Image\", \"image/*\")}\r\n              {this.renderTextArea(\"content\", \"Content\")}\r\n              {this.renderButton(\"Post\")}\r\n            </form>\r\n          </div>\r\n        )}\r\n      </DarkContext.Consumer>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}