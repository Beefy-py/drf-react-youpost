{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kenny\\\\Projects\\\\drf_react_youpost\\\\src\\\\components\\\\actions\\\\postLoading.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from \"react\";\nimport Skeleton from \"@yisheng90/react-loading\";\nimport DarkContext from \"./../../context/darkMode\";\n/*<Spinner animation=\"grow\" variant=\"primary\" />*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostLoading = Component => {\n  _s();\n\n  const darkContext = useContext(DarkContext);\n\n  const renderLoadingBars = numRows => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"block\",\n        width: \"90%\",\n        margin: \"0 auto 2rem\"\n      },\n      className: darkContext.darkMode ? \"post-dark-loader\" : \"\",\n      children: /*#__PURE__*/_jsxDEV(Skeleton, {\n        height: 300,\n        rows: numRows\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this);\n  };\n\n  return function PostLoadingComponent({\n    rows,\n    isLoading,\n    ...props\n  }) {\n    if (!isLoading) {\n      return /*#__PURE__*/_jsxDEV(Component, { ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: renderLoadingBars(rows)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  };\n};\n\n_s(PostLoading, \"yPYQEn1o0USHVA4QTRqYd/BhOjc=\");\n\n_c = PostLoading;\nexport default PostLoading;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostLoading\");","map":{"version":3,"sources":["C:/Users/kenny/Projects/drf_react_youpost/src/components/actions/postLoading.jsx"],"names":["React","useContext","Skeleton","DarkContext","PostLoading","Component","darkContext","renderLoadingBars","numRows","display","width","margin","darkMode","PostLoadingComponent","rows","isLoading","props"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA;;;;AAEA,MAAMC,WAAW,GAAIC,SAAD,IAAe;AAAA;;AACjC,QAAMC,WAAW,GAAGL,UAAU,CAACE,WAAD,CAA9B;;AACA,QAAMI,iBAAiB,GAAIC,OAAD,IAAa;AACrC,wBACE;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAE,OADJ;AAELC,QAAAA,KAAK,EAAE,KAFF;AAGLC,QAAAA,MAAM,EAAE;AAHH,OADT;AAME,MAAA,SAAS,EAAEL,WAAW,CAACM,QAAZ,GAAuB,kBAAvB,GAA4C,EANzD;AAAA,6BAQE,QAAC,QAAD;AAAU,QAAA,MAAM,EAAE,GAAlB;AAAuB,QAAA,IAAI,EAAEJ;AAA7B;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,YADF;AAYD,GAbD;;AAeA,SAAO,SAASK,oBAAT,CAA8B;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,SAAR;AAAmB,OAAGC;AAAtB,GAA9B,EAA6D;AAClE,QAAI,CAACD,SAAL,EAAgB;AACd,0BAAO,QAAC,SAAD,OAAeC;AAAf;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAED,wBAAO,QAAC,KAAD,CAAO,QAAP;AAAA,gBAAiBT,iBAAiB,CAACO,IAAD;AAAlC;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAND;AAOD,CAxBD;;GAAMV,W;;KAAAA,W;AA0BN,eAAeA,WAAf","sourcesContent":["import React, { useContext } from \"react\";\r\nimport Skeleton from \"@yisheng90/react-loading\";\r\nimport DarkContext from \"./../../context/darkMode\";\r\n\r\n/*<Spinner animation=\"grow\" variant=\"primary\" />*/\r\n\r\nconst PostLoading = (Component) => {\r\n  const darkContext = useContext(DarkContext);\r\n  const renderLoadingBars = (numRows) => {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"block\",\r\n          width: \"90%\",\r\n          margin: \"0 auto 2rem\",\r\n        }}\r\n        className={darkContext.darkMode ? \"post-dark-loader\" : \"\"}\r\n      >\r\n        <Skeleton height={300} rows={numRows} />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return function PostLoadingComponent({ rows, isLoading, ...props }) {\r\n    if (!isLoading) {\r\n      return <Component {...props} />;\r\n    }\r\n\r\n    return <React.Fragment>{renderLoadingBars(rows)}</React.Fragment>;\r\n  };\r\n};\r\n\r\nexport default PostLoading;\r\n"]},"metadata":{},"sourceType":"module"}